package gfg.a2_BitMagic.exercise;

import java.util.Arrays;

/*
	Given an array arr[] of N positive elements. The task is to find the Maximum AND Value generated by any pair(arri, arrj) from the array such that i != j.
Note: AND is bitwise '&' operator.


		Example 1:
		
		Input: 
		N = 4
		arr[] = {4, 8, 12, 16}
		Output: 8
		Explanation:
		Pair (8,12) has the Maximum AND Value 8.
*/
public class MaxAndValue {
	public static void main(String[] args) {
		int[] arr = { 4, 8, 12, 16 };
		// Efficient approach
		System.out.println(maxAndValue(arr));
		System.out.println(maxAndValueNavie(arr));
	}

	// Navie Soltion
	private static int maxAndValueNavie(int[] arr) {
		// TODO Auto-generated method stub
		int res = 0;
		int temp = 0;
		for (int i = 0; i < arr.length - 1; i++) {
			for (int j = i + 1; j < arr.length; j++) {
				temp = arr[i] & arr[j];
				if(temp>res) {
					res  = temp;
				}
			}
		}
		return res;
	}

	// Efficient solution - O(n*log(m))
	
	private static int maxAndValue(int[] arr) {
		// TODO Auto-generated method stub
		int res = 0;
		for (int i = 31; i >= 0; i--) {
			int count = numBitSet((res | (1 << i)), arr, arr.length);
			if (count >= 2) {
				res |= (1 << i);
			}
		}
		return res;
	}

	private static int numBitSet(int pattern, int[] arr, int N) {
		// TODO Auto-generated method stub
		int count = 0;
		for (int i = 0; i < N; i++) {
			if ((arr[i] & pattern) == pattern) {
				count++;
			}

		}
		return count;
	}
}
